//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RussianRouletteClient.RussianRouletteService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/RussianRouletteServiceLibrary.Data")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RussianRouletteClient.RussianRouletteService.UMessage[] UMessagesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickName {
            get {
                return this.NickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameField, value) != true)) {
                    this.NickNameField = value;
                    this.RaisePropertyChanged("NickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RussianRouletteClient.RussianRouletteService.UMessage[] UMessages {
            get {
                return this.UMessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.UMessagesField, value) != true)) {
                    this.UMessagesField = value;
                    this.RaisePropertyChanged("UMessages");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UMessage", Namespace="http://schemas.datacontract.org/2004/07/RussianRouletteServiceLibrary.Data")]
    [System.SerializableAttribute()]
    public partial class UMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SenderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeSentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RussianRouletteClient.RussianRouletteService.User UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageContent {
            get {
                return this.MessageContentField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageContentField, value) != true)) {
                    this.MessageContentField = value;
                    this.RaisePropertyChanged("MessageContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SenderId {
            get {
                return this.SenderIdField;
            }
            set {
                if ((this.SenderIdField.Equals(value) != true)) {
                    this.SenderIdField = value;
                    this.RaisePropertyChanged("SenderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeSent {
            get {
                return this.TimeSentField;
            }
            set {
                if ((this.TimeSentField.Equals(value) != true)) {
                    this.TimeSentField = value;
                    this.RaisePropertyChanged("TimeSent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RussianRouletteClient.RussianRouletteService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RussianRouletteService.IGame", CallbackContract=typeof(RussianRouletteClient.RussianRouletteService.IGameCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IGame {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Play", ReplyAction="http://tempuri.org/IGame/PlayResponse")]
        void Play();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Play", ReplyAction="http://tempuri.org/IGame/PlayResponse")]
        System.Threading.Tasks.Task PlayAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/PlaceBullet", ReplyAction="http://tempuri.org/IGame/PlaceBulletResponse")]
        string PlaceBullet(int cylinderHole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/PlaceBullet", ReplyAction="http://tempuri.org/IGame/PlaceBulletResponse")]
        System.Threading.Tasks.Task<string> PlaceBulletAsync(int cylinderHole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/SpingCylinder", ReplyAction="http://tempuri.org/IGame/SpingCylinderResponse")]
        string SpingCylinder();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/SpingCylinder", ReplyAction="http://tempuri.org/IGame/SpingCylinderResponse")]
        System.Threading.Tasks.Task<string> SpingCylinderAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Shoot", ReplyAction="http://tempuri.org/IGame/ShootResponse")]
        bool Shoot(RussianRouletteClient.RussianRouletteService.User player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Shoot", ReplyAction="http://tempuri.org/IGame/ShootResponse")]
        System.Threading.Tasks.Task<bool> ShootAsync(RussianRouletteClient.RussianRouletteService.User player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/SendMessage", ReplyAction="http://tempuri.org/IGame/SendMessageResponse")]
        void SendMessage(RussianRouletteClient.RussianRouletteService.UMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/SendMessage", ReplyAction="http://tempuri.org/IGame/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(RussianRouletteClient.RussianRouletteService.UMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/DetermineWinnder", ReplyAction="http://tempuri.org/IGame/DetermineWinnderResponse")]
        string DetermineWinnder();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/DetermineWinnder", ReplyAction="http://tempuri.org/IGame/DetermineWinnderResponse")]
        System.Threading.Tasks.Task<string> DetermineWinnderAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Rematch", ReplyAction="http://tempuri.org/IGame/RematchResponse")]
        string Rematch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Rematch", ReplyAction="http://tempuri.org/IGame/RematchResponse")]
        System.Threading.Tasks.Task<string> RematchAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/PlayerSentMessage")]
        void PlayerSentMessage();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameChannel : RussianRouletteClient.RussianRouletteService.IGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameClient : System.ServiceModel.DuplexClientBase<RussianRouletteClient.RussianRouletteService.IGame>, RussianRouletteClient.RussianRouletteService.IGame {
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Play() {
            base.Channel.Play();
        }
        
        public System.Threading.Tasks.Task PlayAsync() {
            return base.Channel.PlayAsync();
        }
        
        public string PlaceBullet(int cylinderHole) {
            return base.Channel.PlaceBullet(cylinderHole);
        }
        
        public System.Threading.Tasks.Task<string> PlaceBulletAsync(int cylinderHole) {
            return base.Channel.PlaceBulletAsync(cylinderHole);
        }
        
        public string SpingCylinder() {
            return base.Channel.SpingCylinder();
        }
        
        public System.Threading.Tasks.Task<string> SpingCylinderAsync() {
            return base.Channel.SpingCylinderAsync();
        }
        
        public bool Shoot(RussianRouletteClient.RussianRouletteService.User player) {
            return base.Channel.Shoot(player);
        }
        
        public System.Threading.Tasks.Task<bool> ShootAsync(RussianRouletteClient.RussianRouletteService.User player) {
            return base.Channel.ShootAsync(player);
        }
        
        public void SendMessage(RussianRouletteClient.RussianRouletteService.UMessage message) {
            base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(RussianRouletteClient.RussianRouletteService.UMessage message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public string DetermineWinnder() {
            return base.Channel.DetermineWinnder();
        }
        
        public System.Threading.Tasks.Task<string> DetermineWinnderAsync() {
            return base.Channel.DetermineWinnderAsync();
        }
        
        public string Rematch() {
            return base.Channel.Rematch();
        }
        
        public System.Threading.Tasks.Task<string> RematchAsync() {
            return base.Channel.RematchAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RussianRouletteService.IPortal", CallbackContract=typeof(RussianRouletteClient.RussianRouletteService.IPortalCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IPortal {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/SignUp", ReplyAction="http://tempuri.org/IPortal/SignUpResponse")]
        string SignUp(RussianRouletteClient.RussianRouletteService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/SignUp", ReplyAction="http://tempuri.org/IPortal/SignUpResponse")]
        System.Threading.Tasks.Task<string> SignUpAsync(RussianRouletteClient.RussianRouletteService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/SignIn", ReplyAction="http://tempuri.org/IPortal/SignInResponse")]
        bool SignIn(RussianRouletteClient.RussianRouletteService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/SignIn", ReplyAction="http://tempuri.org/IPortal/SignInResponse")]
        System.Threading.Tasks.Task<bool> SignInAsync(RussianRouletteClient.RussianRouletteService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/SendPublicMessage", ReplyAction="http://tempuri.org/IPortal/SendPublicMessageResponse")]
        void SendPublicMessage(RussianRouletteClient.RussianRouletteService.UMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/SendPublicMessage", ReplyAction="http://tempuri.org/IPortal/SendPublicMessageResponse")]
        System.Threading.Tasks.Task SendPublicMessageAsync(RussianRouletteClient.RussianRouletteService.UMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/SendPrivateMessage", ReplyAction="http://tempuri.org/IPortal/SendPrivateMessageResponse")]
        void SendPrivateMessage(RussianRouletteClient.RussianRouletteService.User user, RussianRouletteClient.RussianRouletteService.UMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/SendPrivateMessage", ReplyAction="http://tempuri.org/IPortal/SendPrivateMessageResponse")]
        System.Threading.Tasks.Task SendPrivateMessageAsync(RussianRouletteClient.RussianRouletteService.User user, RussianRouletteClient.RussianRouletteService.UMessage message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/InviteToPlay", ReplyAction="http://tempuri.org/IPortal/InviteToPlayResponse")]
        void InviteToPlay(RussianRouletteClient.RussianRouletteService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/InviteToPlay", ReplyAction="http://tempuri.org/IPortal/InviteToPlayResponse")]
        System.Threading.Tasks.Task InviteToPlayAsync(RussianRouletteClient.RussianRouletteService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/AgreeToPlay", ReplyAction="http://tempuri.org/IPortal/AgreeToPlayResponse")]
        void AgreeToPlay();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/AgreeToPlay", ReplyAction="http://tempuri.org/IPortal/AgreeToPlayResponse")]
        System.Threading.Tasks.Task AgreeToPlayAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPortalCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPortal/OnUserLogin")]
        void OnUserLogin(int numeris);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPortalChannel : RussianRouletteClient.RussianRouletteService.IPortal, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PortalClient : System.ServiceModel.DuplexClientBase<RussianRouletteClient.RussianRouletteService.IPortal>, RussianRouletteClient.RussianRouletteService.IPortal {
        
        public PortalClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PortalClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PortalClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PortalClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PortalClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string SignUp(RussianRouletteClient.RussianRouletteService.User user) {
            return base.Channel.SignUp(user);
        }
        
        public System.Threading.Tasks.Task<string> SignUpAsync(RussianRouletteClient.RussianRouletteService.User user) {
            return base.Channel.SignUpAsync(user);
        }
        
        public bool SignIn(RussianRouletteClient.RussianRouletteService.User user) {
            return base.Channel.SignIn(user);
        }
        
        public System.Threading.Tasks.Task<bool> SignInAsync(RussianRouletteClient.RussianRouletteService.User user) {
            return base.Channel.SignInAsync(user);
        }
        
        public void SendPublicMessage(RussianRouletteClient.RussianRouletteService.UMessage message) {
            base.Channel.SendPublicMessage(message);
        }
        
        public System.Threading.Tasks.Task SendPublicMessageAsync(RussianRouletteClient.RussianRouletteService.UMessage message) {
            return base.Channel.SendPublicMessageAsync(message);
        }
        
        public void SendPrivateMessage(RussianRouletteClient.RussianRouletteService.User user, RussianRouletteClient.RussianRouletteService.UMessage message) {
            base.Channel.SendPrivateMessage(user, message);
        }
        
        public System.Threading.Tasks.Task SendPrivateMessageAsync(RussianRouletteClient.RussianRouletteService.User user, RussianRouletteClient.RussianRouletteService.UMessage message) {
            return base.Channel.SendPrivateMessageAsync(user, message);
        }
        
        public void InviteToPlay(RussianRouletteClient.RussianRouletteService.User user) {
            base.Channel.InviteToPlay(user);
        }
        
        public System.Threading.Tasks.Task InviteToPlayAsync(RussianRouletteClient.RussianRouletteService.User user) {
            return base.Channel.InviteToPlayAsync(user);
        }
        
        public void AgreeToPlay() {
            base.Channel.AgreeToPlay();
        }
        
        public System.Threading.Tasks.Task AgreeToPlayAsync() {
            return base.Channel.AgreeToPlayAsync();
        }
    }
}
